{"version":3,"sources":["webpack:///./task_1.js","webpack:///./task_2.js","webpack:///./task_3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","updatedUsers","table","toggleUserState","allUsers","userName","map","user","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAS,SAAAC,GAChBC,YAAW,WACPD,EAAQF,KACTA,OAIHI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAYnBP,EAAS,SAAAQ,GAAY,OAAIN,QAAQO,MAAMD,IAEvCE,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIf,SAAS,SAACC,GACEA,EAAQa,EAASE,KAAI,SAAAC,GAAI,OAC1CA,EAAKR,OAASM,EAAd,iBAA8BE,EAA9B,CAAoCP,QAASO,EAAKP,SAAYO,UAaxEJ,EAAgBL,EAAO,SAASD,KAAKJ,GACrCU,EAAgBL,EAAO,OAAOD,KAAKJ,GCnCrC,IAIQe,EAAkB,SAACC,GAEvB,OAAO,IAAInB,SAAS,SAACC,EAASmB,GAE1B,IAR2BC,EAAKC,EAQ1BxB,GARqBuB,EAQa,IARRC,EAQa,IAP1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAQ5CnB,YAAW,WACQqB,KAAKE,SAAW,GAEjCxB,EAAQ,CAACyB,GAAIP,EAAYO,GAAItB,KAAMN,IAEnCsB,EAAOD,EAAYO,MAEpB5B,OAML6B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAItB,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAaFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.b307f0c4110ddb7370f4.js","sourcesContent":["const delay = ms => {\n    return new Promise (resolve => {\n        setTimeout(()=>{\n            resolve(ms)\n        }, ms)\n    })\n  };\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n//   const toggleUserState = (allUsers, userName, callback) => {\n//     const updatedUsers = allUsers.map(user =>\n//       user.name === userName ? { ...user, active: !user.active } : user,\n//     );\n//         console.log(allUsers);\n//         console.log(userName);\n//     callback(updatedUsers);\n//   };\n  \n  const logger = updatedUsers => console.table(updatedUsers);\n\n  const toggleUserState = (allUsers, userName) => {\n      return new Promise ((resolve) => {\n        const updatedUsers = resolve(allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : (user),))\n       })\n  }\n        \n  /*\n   * Сейчас работает так\n   */\n//   toggleUserState(users, 'Mango', logger);\n//   toggleUserState(users, 'Lux', logger);\n  \n  /*\n   * Должно работать так\n   */\n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = (transaction) => { \n    \n    return new Promise ((resolve, reject)=> {\n        \n        const delay = randomIntegerFromInterval(200, 500);\n            setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n              resolve({id: transaction.id, time: delay})\n            } else {\n              reject(transaction.id)\n            }\n          }, delay);\n\n          \n    } )\n  }\n   \n  const logSuccess = ({id, time}) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  /*\n   * Работает так\n   */\n//   makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n//   makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n//   makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n//   makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n  /*\n   * Должно работать так\n   */\n  makeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);\n"],"sourceRoot":""}